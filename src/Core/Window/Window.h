#pragma once

#include <Core/stdcpp.h>

#include <Core/Windows.h>
#include <Core/types.h>

namespace Kraid
{

    enum class WindowEventMessage
    {
        Null = WM_NULL,
        Create,
        Destroy,
        Move,
        Active,
        SetFocus,
        KillFocus,
        Enable,
        SetRedraw,
        SetText,
        GetText,
        GetTextLenght,
        Paint,
        Close,
        QueryEndSession,
        QueryOpen,
        Quit,
        EraseBackground,
        SystemColorChange,
        ShowWindow,
        INISettingsChange,
        DeveloperModeChange,
        ActivateApp,
        FontChange,
        TimeChange,
        CancelMode,
        SetCursor,
        MouseActivation,
        ChildActivate,
        QueueSync,
        GetMinMaxInfo,
        PaintIcon = WM_PAINTICON,
        IconEraseBackground = WM_ICONERASEBKGND,
        NextDialogBox = WM_NEXTDLGCTL,
        SpoolerStatus = WM_SPOOLERSTATUS,
        DrawItem = WM_DRAWITEM,
        MeasureItem = WM_MEASUREITEM,
        DeleteItem = WM_DELETEITEM,
        KeyToItem = WM_VKEYTOITEM,
        CharacterToItem = WM_CHARTOITEM,
        SetFont = WM_SETFONT,
        GetFont = WM_GETFONT,
        SetHotkey = WM_SETHOTKEY,
        GetHotkey = WM_GETHOTKEY,
        QueryDragIcon = WM_QUERYDRAGICON,
        CompareItem = WM_COMPAREITEM,
        GetObject = WM_GETOBJECT,
        Compacting = WM_COMPACTING,
        COMNotify = WM_COMMNOTIFY,
        WindowPositionChanging = WM_WINDOWPOSCHANGING,
        WindowPositionChanged = WM_WINDOWPOSCHANGED,
        Power = WM_POWER,
        CopyData = WM_COPYDATA,
        CancelJournal = WM_CANCELJOURNAL,
        Notify = WM_NOTIFY,
        ChangeInputLanguageRequest = WM_INPUTLANGCHANGEREQUEST,
        InputLanguageChanged = WM_INPUTLANGCHANGE,
        TrainingCardInitiated = WM_TCARD,
        Help = WM_HELP,
        UserChanged = WM_USERCHANGED,
        NotifyFormat = WM_NOTIFYFORMAT,
        ContextMenu = WM_CONTEXTMENU,
        StyleIsChanging = WM_STYLECHANGING,
        StyleChanged = WM_STYLECHANGED,
        DisplayChanged = WM_DISPLAYCHANGE,
        GetIcon = WM_GETICON,
        SetIcon = WM_SETICON,
        InitialCreate = WM_NCCREATE,
        FinalDestroy = WM_NCDESTROY,
        WM_NCCALCSIZE,
        WM_NCHITTEST,
        WM_NCPAINT,
        WM_NCACTIVATE,
        WM_GETDLGCODE,
        WM_SYNCPAINT,
        WM_NCMOUSEMOVE,
        WM_NCLBUTTONDOWN,
        WM_NCLBUTTONUP,
        WM_NCLBUTTONDBLCLK,
        WM_NCRBUTTONDOWN,
        WM_NCRBUTTONUP,
        WM_NCRBUTTONDBLCLK,
        WM_NCMBUTTONDOWN,
        WM_NCMBUTTONUP,
        WM_NCMBUTTONDBLCLK,
        WM_NCXBUTTONDOWN,
        WM_NCXBUTTONUP,
        WM_NCXBUTTONDBLCLK,
        InputDeviceChanged = WM_INPUT_DEVICE_CHANGE,
        Input = WM_INPUT,
        WM_KEYFIRST,
        KeyPressed = WM_KEYDOWN,
        KeyReleased = WM_KEYUP,
        WM_CHAR,
        WM_DEADCHAR,
        SystemKeyPressed = WM_SYSKEYDOWN,
        SystemKeyReleased = WM_SYSKEYUP,
        WM_SYSCHAR,
        WM_SYSDEADCHAR,
        WM_UNICHAR,
        WM_KEYLAST,
        WM_KEYLAST,
        WM_IME_STARTCOMPOSITION,
        WM_IME_ENDCOMPOSITION,
        WM_IME_COMPOSITION,
        WM_IME_KEYLAST,
        WM_INITDIALOG,
        WM_COMMAND,
        WM_SYSCOMMAND,
        WM_TIMER,
        HorizontalScroll = WM_HSCROLL,
        VerticalScroll = WM_VSCROLL,
        WM_INITMENU,
        WM_INITMENUPOPUP,
        WM_GESTURE,
        WM_GESTURENOTIFY,
        WM_MENUSELECT,
        WM_MENUCHAR,
        WM_ENTERIDLE,
        WM_MENURBUTTONUP,
        WM_MENUDRAG,
        WM_MENUGETOBJECT,
        WM_UNINITMENUPOPUP,
        WM_MENUCOMMAND,
        WM_CHANGEUISTATE,
        WM_UPDATEUISTATE,
        WM_QUERYUISTATE,
        WM_CTLCOLORMSGBOX,
        WM_CTLCOLOREDIT,
        WM_CTLCOLORLISTBOX,
        WM_CTLCOLORBTN,
        WM_CTLCOLORDLG,
        WM_CTLCOLORSCROLLBAR,
        WM_CTLCOLORSTATIC,
        WM_MOUSEFIRST,
        WM_MOUSEMOVE,
        LeftMoutseButtonPressed = WM_LBUTTONDOWN,
        LeftMouseButtonReleased = WM_LBUTTONUP,
        LeftMouseButtonDoubleClick = WM_LBUTTONDBLCLK,
        RightMouseButtonPressed = WM_RBUTTONDOWN,
        RightMouseButtonReleased = WM_RBUTTONUP,
        RightMouseButtonDoubleClick = WM_RBUTTONDBLCLK,
        MiddleMouseButtonPressed = WM_MBUTTONDOWN,
        MiddleMouseButtonReleased = WM_MBUTTONUP,
        MiddleMouseButtonDoubleClick = WM_MBUTTONDBLCLK,
        MouseScroll = WM_MOUSEWHEEL,
        WM_XBUTTONDOWN,
        WM_XBUTTONUP,
        WM_XBUTTONDBLCLK,
        WM_MOUSEHWHEEL,
        WM_MOUSELAST,
        WM_MOUSELAST,
        WM_MOUSELAST,
        WM_MOUSELAST,
        WM_PARENTNOTIFY,
        WM_ENTERMENULOOP,
        WM_EXITMENULOOP,
        WM_NEXTMENU,
        WM_SIZING,
        WM_CAPTURECHANGED,
        WM_MOVING,
        WM_POWERBROADCAST,
        WM_DEVICECHANGE,
        WM_MDICREATE,
        WM_MDIDESTROY,
        WM_MDIACTIVATE,
        WM_MDIRESTORE,
        WM_MDINEXT,
        WM_MDIMAXIMIZE,
        WM_MDITILE,
        WM_MDICASCADE,
        WM_MDIICONARRANGE,
        WM_MDIGETACTIVE,
        WM_MDISETMENU,
        WM_ENTERSIZEMOVE,
        WM_EXITSIZEMOVE,
        WM_DROPFILES,
        WM_MDIREFRESHMENU,
        WM_POINTERDEVICECHANGE,
        WM_POINTERDEVICEINRANGE,
        WM_POINTERDEVICEOUTOFRANGE,
        WM_TOUCH,
        WM_NCPOINTERUPDATE,
        WM_NCPOINTERDOWN,
        WM_NCPOINTERUP,
        WM_POINTERUPDATE,
        WM_POINTERDOWN,
        WM_POINTERUP,
        WM_POINTERENTER,
        WM_POINTERLEAVE,
        WM_POINTERACTIVATE,
        WM_POINTERCAPTURECHANGED,
        WM_TOUCHHITTESTING,
        WM_POINTERWHEEL,
        WM_POINTERHWHEEL,
        WM_IME_SETCONTEXT,
        WM_IME_NOTIFY,
        WM_IME_CONTROL,
        WM_IME_COMPOSITIONFULL,
        WM_IME_SELECT,
        WM_IME_CHAR,
        WM_IME_REQUEST,
        WM_IME_KEYDOWN,
        WM_IME_KEYUP,
        WM_MOUSEHOVER,
        WM_MOUSELEAVE,
        WM_NCMOUSEHOVER,
        WM_NCMOUSELEAVE,
        WM_WTSSESSION_CHANGE,
        WM_TABLET_FIRST,
        WM_TABLET_LAST,
        WM_CUT,
        WM_COPY,
        WM_PASTE,
        WM_CLEAR,
        WM_UNDO,
        WM_RENDERFORMAT,
        WM_RENDERALLFORMATS,
        WM_DESTROYCLIPBOARD,
        WM_DRAWCLIPBOARD,
        WM_PAINTCLIPBOARD,
        WM_VSCROLLCLIPBOARD,
        WM_SIZECLIPBOARD,
        WM_ASKCBFORMATNAME,
        WM_CHANGECBCHAIN,
        WM_HSCROLLCLIPBOARD,
        WM_QUERYNEWPALETTE,
        WM_PALETTEISCHANGING,
        WM_PALETTECHANGED,
        WM_HOTKEY,
        WM_PRINT,
        WM_PRINTCLIENT,
        WM_APPCOMMAND,
        WM_THEMECHANGED,
        WM_CLIPBOARDUPDATE,
        WM_DWMCOMPOSITIONCHANGED,
        WM_DWMNCRENDERINGCHANGED,
        WM_DWMCOLORIZATIONCOLORCHANGED,
        WM_DWMWINDOWMAXIMIZEDCHANGE,
        WM_DWMSENDICONICTHUMBNAIL,
        WM_DWMSENDICONICLIVEPREVIEWBITMAP,
        WM_GETTITLEBARINFOEX,
        WM_HANDHELDFIRST,
        WM_HANDHELDLAST,
        WM_AFXFIRST,
        WM_AFXLAST,
        WM_PENWINFIRST,
        WM_PENWINLAST,
        WM_APP,
        WM_USER
    };

    struct Window
    {
    public:
        HWND window_handle = NULL;
        uint16 width = 0;
        uint16 height = 0;
        volatile bool open = false;
        std::unordered_multimap<uint32, std::function<LRESULT(HWND, uint32, WPARAM, LPARAM)>> event_callbacks;

    public:
        Window(HINSTANCE instance,const std::wstring& title, uint16 width, uint16 heigth);
        ~Window();
        void RegisterUniversalEventCallback(const std::function<LRESULT(HWND,uint32,WPARAM,LPARAM)>& callback);
        void RegisterEventCallback(uint32 event,const std::function<LRESULT(HWND,uint32,WPARAM,LPARAM)>& callback);
    private:
        LRESULT ExecuteEventCallbacks(uint32 event,HWND window_handle, WPARAM wParam, LPARAM lParam);
        static LRESULT CALLBACK WindowProc(HWND hwnd, UINT uMsg, WPARAM wParam, LPARAM lParam);
    };
}
